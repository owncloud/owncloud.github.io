<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extension Types on ownCloud</title>
    <link>https://owncloud.dev/clients/web/extension-system/extension-types/</link>
    <description>Recent content in Extension Types on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://owncloud.dev/clients/web/extension-system/extension-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application Menu Item Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/app-menu-items/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/app-menu-items/</guid>
      <description>Extension Type AppMenuItem Configuration Example Extension Type AppMenuItem This extension type allows apps to register links to internal or external pages within the application switcher menu on the top left.
Configuration The Interface for an AppMenuItemExtension looks like so:
interface AppMenuItemExtension { id: string type: &amp;#39;appMenuItem&amp;#39; extensionPointIds?: string[] label: () =&amp;gt; string color?: string handler?: () =&amp;gt; void icon?: string path?: string priority?: number url?: string } For id, type, and extensionPointIds, please see extension base section in the top level docs.</description>
    </item>
    
    <item>
      <title>Custom Component Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/custom-components/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/custom-components/</guid>
      <description>Extension Type CustomComponent Configuration Example Extension Type CustomComponent CustomComponent extensions need to define one or multiple extensionPointIds as render target. A CustomComponentTarget component for this very extension point needs to be mounted in the current view.
Configuration To define a custom component extension, you implement the CustomComponentExtension interface. Here&amp;rsquo;s what it looks like:
interface CustomComponentExtension { id: string type: &amp;#39;customComponent&amp;#39; extensionPointIds?: string[] content: Slot | Component } For id, type, and extensionPointIds, please see extension base section in the top level docs.</description>
    </item>
    
    <item>
      <title>Action Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/actions/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/actions/</guid>
      <description>Action extension type Configuration Action Example Action extension type Actions are one of the possible extension types. Registered actions get rendered in various places across the UI, depending on their scope and targets.
Configuration This is what the ActionExtension interface looks like:
interface ActionExtension { id: string type: &amp;#39;action&amp;#39; extensionPointIds?: string[] action: Action // Please check the Action section below } For id, type, and extensionPointIds, please see extension base section in top level docs.</description>
    </item>
    
    <item>
      <title>Folder View Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/folder-view/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/folder-view/</guid>
      <description>Folder view extension type The folder view is one of the possible extension types. Registered folder view can be used to render multiple resources (folders, files, spaces) in the UI.
Configuration This is what the FolderViewExtension interface looks like:
interface FolderViewExtension { id: string type: &amp;#39;folderView&amp;#39; extensionPointIds?: string[] folderView: FolderView // See FolderView section below } For id, type, and extensionPointIds, please see extension base section in top level docs.</description>
    </item>
    
    <item>
      <title>Left Sidebar Menu Item Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/left-sidebar-menu-item/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/left-sidebar-menu-item/</guid>
      <description>Left sidebar menu item extension type Configuration AppNavigationItem Example Left sidebar menu item extension type One possible extension type is left sidebar menu items. Registered left sidebar menu items get rendered in the left sidebar, as long as there is more than one available.
Configuration To define a left sidebar menu item, you implement the SidebarNavExtension interface. It looks like this:
interface SidebarNavExtension { id: string type: &amp;#39;sidebarNav&amp;#39; extensionPointIds?: string[] navItem: AppNavigationItem // Please check the AppNavigationItem section below } } For id, type, and extensionPointIds, please see extension base section in top level docs.</description>
    </item>
    
    <item>
      <title>Right Sidebar Panel Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/right-sidebar-panels/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/right-sidebar-panels/</guid>
      <description>Extension Type SideBarPanel Configuration SideBarPanelContext SideBarPanel Extension Point FileSideBar Example Extension Type SideBarPanel The right sidebar is supposed to show information and make context specific actions available for single or multiple selected items.
It is structured in a hierarchical way:
Panels which are defined as root panels get rendered as immediate members of the right sidebar. Panels which are defined as non-root panels receive a navigation item below the root panels so that users can navigate into the respective sub panel.</description>
    </item>
    
    <item>
      <title>Search Extensions</title>
      <link>https://owncloud.dev/clients/web/extension-system/extension-types/search/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/extension-system/extension-types/search/</guid>
      <description>Search extensions Configuration ListSearch PreviewSearch Example Search extensions One possible extension type is search. Registered search extensions are available when using the search field in the topbar. A search extension can consist of a list and a preview search. The result of a preview search is shown below the search input field while the list search result is
Configuration An example of a search extension configuration can be found below:</description>
    </item>
    
  </channel>
</rss>
