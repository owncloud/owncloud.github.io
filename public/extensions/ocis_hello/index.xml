<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello (example extension) on ownCloud</title>
    <link>https://owncloud.dev/extensions/ocis_hello/</link>
    <description>Recent content in Hello (example extension) on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jan 2022 12:33:03 +0000</lastBuildDate><atom:link href="https://owncloud.dev/extensions/ocis_hello/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/ocis_hello/configuration/</link>
      <pubDate>Sun, 23 Jan 2022 12:33:03 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command line flags   Root Command Sub Commands  hello server hello health        Configuration     Configuration using config files     Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.dev/extensions/ocis_hello/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/building/</guid>
      <description>Frontend Backend Documentation      As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go &amp;gt;= v1.16. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/ocis_hello/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/grpc/</guid>
      <description>hello.proto  GreetRequest GreetResponse Hello   Scalar Value Types      hello.proto     GreetRequest        Field Type Label Description     name string      GreetResponse        Field Type Label Description     message string      Hello        Method Name Request Type Response Type Description     Greet GreetRequest GreetResponse     Scalar Value Types        .</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://owncloud.dev/extensions/ocis_hello/running/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/running/</guid>
      <description>In order to use the Hello extension we need to configure and start oCIS first. After that we can run the Hello extension itself.
Configure and start oCIS     You can either start oCIS from a binary or build it from source.
No matter which way you choose, we need to create a configuration file for ownCloud Web, so that the Hello extension will be loaded in the frontend.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://owncloud.dev/extensions/ocis_hello/settings/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/settings/</guid>
      <description>oCIS provides an settings extension that other extensions can use to make settings accessible to users.
In case of the Hello extension administrator users are able to change the greeter message.
Settings are stored and presented to the user by the oCIS settings extension. It also exposes endpoints for registering and manipulating so called settings bundles.
The settings defined through settings bundles can be changed by authenticated users in ownCloud Web, if they have enough permissions to edit them.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.dev/extensions/ocis_hello/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/testing/</guid>
      <description>This repository provides a general guideline for creating tests for an oCIS extension. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.
Unit tests     Unit tests generally live inside *_test.go files in the /pkg directory.</description>
    </item>
    
  </channel>
</rss>
