<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on ownCloud</title>
    <link>https://owncloud.dev/ocis/deployment/</link>
    <description>Recent content in Deployment on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 20:35:00 +0100</lastBuildDate><atom:link href="https://owncloud.dev/ocis/deployment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous Deployment</title>
      <link>https://owncloud.dev/ocis/deployment/continuous_deployment/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/continuous_deployment/</guid>
      <description>oCIS with Web Office Master Rolling Release Production Release Master with OnlyOffice Rolling Release with OnlyOffice oCIS and ownCloud Web with both most recent development versions Master branches oCIS with Keycloak Rolling Release oCIS with S3 storage backend (MinIO) Rolling Release oCIS with LDAP for users and groups Rolling Release We are continuously deploying the following deployment examples. Every example is deployed in two flavors:
Master: reflects the current master branch state of oCIS and will be updated with every commit to master Rolling: reflects the latest rolling release of oCIS and will be updated with every rolling release Production: reflects the latest production release of oCIS and will be updated with every production release The configuration for the continuous deployment can be found in the oCIS repository.</description>
    </item>
    
    <item>
      <title>Monitoring &amp; Tracing</title>
      <link>https://owncloud.dev/ocis/deployment/monitoring-tracing/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/monitoring-tracing/</guid>
      <description>Overview about the proposed solution Monitoring &amp;amp; tracing clients Monitoring &amp;amp; tracing server Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.
If you are a developer and want to trace during developing you should have a look at example server setup.
This documentation describes how to set up a long-running monitoring &amp;amp; tracing infrastructure for one or multiple oCIS servers or deployments.</description>
    </item>
    
    <item>
      <title>Systemd service</title>
      <link>https://owncloud.dev/ocis/deployment/systemd/</link>
      <pubDate>Sun, 27 Sep 2020 06:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/systemd/</guid>
      <description>Install the oCIS binary Systemd service definition Starting the oCIS service Install the oCIS binary Download the oCIS binary of your preferred version and for your CPU architecture and operating system from download.owncloud.com.
Rename the downloaded binary to ocis and move it to /usr/bin/. As a next step, you need to mark it as executable with chmod +x /usr/bin/ocis.
When you now run ocis help on your command line, you should see the available options for the oCIS command.</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.dev/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/basic-remote-setup/</guid>
      <description>Start the oCIS fullstack server from binary Using automatically generated certificates Using already present certificates Start the oCIS fullstack server with Docker Compose The default configuration of the oCIS binary and the owncloud/ocis docker image assume, that you access oCIS on localhost. This enables you to do quick testing and development without any configuration.
If you need to access oCIS running in a docker container, on a VM or a remote machine via another hostname than localhost, you need to configure this hostname in oCIS.</description>
    </item>
    
    <item>
      <title>Full modular oCIS with WebOffice</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_full/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_full/</guid>
      <description>Overview Easy Default Goal: Default Components Optional Components Important Note Server Deployment Requirements Install oCIS and Traefik Reverse Proxy and SSL Infinite Scale Release and Version Local Setup Additional services Clamav Virusscanner Traefik Dashboard Cloud Importer S3 Storage Use a Local Minio S3 Storage Backend Local Setup for Web Development Using Podman Overview oCIS, the collaboration service, Collabora or OnlyOffice running behind Traefik as reverse proxy Collabora or OnlyOffice enable you to edit office documents in your browser The collaboration server acts as a bridge to make the oCIS storage accessible to Collabora and OnlyOffice Traefik generating self-signed certificates for local setup or obtaining valid SSL certificates for a server setup The whole deployment acts as a modular toolkit to use different flavors of office suites and ocis features Find this example on GitHub</description>
    </item>
    
    <item>
      <title>oCIS with Hello extension</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_hello/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_hello/</guid>
      <description>Overview Server Deployment Requirements Install oCIS and Traefik Local setup Overview oCIS running behind Traefik as reverse proxy oCIS Hello extension runs beside the main oCIS stack and providing the Hello functionality Traefik generating self-signed certificates for local setup or obtaining valid SSL certificates for a server setup Find this example on GitHub
The docker stack consists of 3 containers. One of them is Traefik, a proxy which is terminating SSL and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with Keycloak</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_keycloak/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_keycloak/</guid>
      <description>Overview Server Deployment Requirements Install oCIS and Traefik Local setup Overview oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self-signed certificates for local setup or obtaining valid SSL certificates for a server setup Find this example on GitHub
The docker stack consists 4 containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with LDAP</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_ldap/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_ldap/</guid>
      <description>Overview Server Deployment Requirements Install this example Local setup Overview Traefik generating self-signed certificates for local setup or obtaining valid SSL certificates for a server setup OpenLDAP server with demo users LDAP admin interface to edit users oCIS running behind Traefik as reverse proxy oCIS is using the LDAP server as user backend Find this example on GitHub
Server Deployment Requirements Linux server with docker and docker-compose installed four domains set up and pointing to your server ocis.</description>
    </item>
    
    <item>
      <title>Parallel deployment of oC10 and oCIS</title>
      <link>https://owncloud.dev/ocis/deployment/oc10_ocis_parallel/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/oc10_ocis_parallel/</guid>
      <description>Overview Server Deployment Requirements Install this example Local setup Overview This setup reflects stage 6 of the oC10 to oCIS migration plan Traefik generating self-signed certificates for local setup or obtaining valid SSL certificates for a server setup OpenLDAP server with demo users LDAP admin interface to edit users Keycloak as OpenID Connect provider in federation with the LDAP server ownCloud 10 with MariaDB and Redis ownCloud 10 is configured to synchronize users from the LDAP server ownCloud 10 is used to use OpenID Connect for authentication with Keycloak oCIS running behind Traefik as reverse proxy oCIS is using the ownCloudSQL storage driver on the same files and same database as ownCloud 10 oCIS is using Keycloak as OpenID Connect provider oCIS is using the LDAP server as user backend All requests to both oCIS and oC10 are routed through the oCIS proxy and will be routed based on an OIDC claim to one of them.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://owncloud.dev/ocis/deployment/kubernetes/</link>
      <pubDate>Thu, 23 Sep 2021 11:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/kubernetes/</guid>
      <description>What is Kubernetes References and further reads How does oCIS fit in the Kubernetes model What is Minikube What is kubectl What are Helm Charts, and why they are useful for oCIS Installing Helm Setting up Minikube oCIS charts Run oCIS What is Kubernetes Formally described as:
Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.
source
Without getting too deep in definitions, and for the purpose of compactness, Kubernetes can be summarized as a way of managing containers that run applications to ensure that there is no downtime and an optimal usage of resources.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.dev/ocis/deployment/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/bridge/</guid>
      <description>Current status How to do it Install the owncloud 10 graphapi app Enable the graphapi app Grab ocis! Start ocis glauth configure it Run it! Check it is up and running Start ocis storage-gateway, storage-authbasic and storage-userprovider Start ocis storage-userprovider Start ocis idp Set environment variables Run it! Check it is up and running Start ocis proxy Start ocis-web Run it! Patch owncloud Install the owncloud 10 openidconnect app Next steps We are planning to build a bridge from ownCloud 10 to ocis.</description>
    </item>
    
    <item>
      <title>Installing ownCloud Infinite Scale at Ubernauten</title>
      <link>https://owncloud.dev/ocis/deployment/ubernauten/</link>
      <pubDate>Mon, 04 Dec 2023 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ubernauten/</guid>
      <description>Uberspace and ownCloud Infinite Scale in 50 seconds Three Steps to your Infinite UberSpace Service Management with Supervisord Updating ownCloud Infinite Scale Wiping and Clean Restart from Scratch Troubleshooting Uberspace and ownCloud Infinite Scale in 50 seconds This howto shows how to set up ownCloud Infinite Scale for a quick test. For convenience, we will use the free service from the Ubernauten &amp;ndash; Join us here: Uberspace Registration Page. They offer free of charge (for the first month) web hosting.</description>
    </item>
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.dev/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud Example for Hetzner Cloud create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
Access server via ssh as root
Create a new user
$ adduser --disabled-password --gecos &amp;quot;&amp;quot; admin</description>
    </item>
    
  </channel>
</rss>
