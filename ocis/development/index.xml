<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on ownCloud</title>
    <link>https://owncloud.dev/ocis/development/</link>
    <description>Recent content in Development on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 20:35:00 +0100</lastBuildDate><atom:link href="https://owncloud.dev/ocis/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.dev/ocis/development/getting-started/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/getting-started/</guid>
      <description>Requirements Repository structure Starting points Developing oCIS Developing extensions Requirements We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.
Besides standard development tools like git and a text editor, you need the following software for development:
Go &amp;gt;= v1.22 (install instructions) pnpm (install instructions) docker (install instructions) docker-compose (install instructions) If you find tools needed besides the mentioned above, please feel free to open an issue or open a PR.</description>
    </item>
    
    <item>
      <title>Environment Variables</title>
      <link>https://owncloud.dev/ocis/development/envvars/</link>
      <pubDate>Thu, 22 Aug 2024 15:41:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/envvars/</guid>
      <description>Environment variables are an essential part of configuring services.
If you are going to create new ones or deprecate existing ones, you must read the Envvar Naming Scope and the Deprecating Variables documentation for more details first before doing so.</description>
    </item>
    
    <item>
      <title>Beta testplan</title>
      <link>https://owncloud.dev/ocis/development/beta-testplan/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/beta-testplan/</guid>
      <description>Beta Testing This document is supposed to give you some ideas how and what to test on ocis. It&amp;rsquo;s not meant to be an extensive list of all tests to be done, rather it should help you, as beta-tester, to get started and enable you to get creative and create your own test-cases. Derive from these examples, be creative, do unusual and unconventional things, to try to break things.</description>
    </item>
    
    <item>
      <title>Profiling</title>
      <link>https://owncloud.dev/ocis/development/profiling/</link>
      <pubDate>Tue, 24 Aug 2021 12:32:20 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/profiling/</guid>
      <description>0. Prerequisites 1. Clone Reva 2. Patch reva with the area that you want sampled. 3. Replace reva in oCIS go.mod with local version and build a new binary 4. Build a new ocis binary 5. Start oCIS server 6. Run pprof Install pprof Collecting samples Room for improvement References 0. Prerequisites Go development kit of a supported version. Follow these instructions to install the go tool and set up GOPATH.</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://owncloud.dev/ocis/development/continuous-integration/</link>
      <pubDate>Thu, 01 Oct 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/continuous-integration/</guid>
      <description>Concepts Things done in CI Flags in commit message and PR title Knowledge base oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.
Concepts The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration. We enforce Starlark format guidelines with Bazel Buildifier. You can format the .</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://owncloud.dev/ocis/development/build-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/build-docs/</guid>
      <description>Build the documentation Add changes to the documentation Build the documentation For building the documentation you need to have Make and Go 1.14 or higher installed. Just run make -C docs docs-serve from within the root level of the oCIS git repository. This will make documentation available on localhost:1313 and also do a hot reload if you change something in the (non autogenerated) documentation files.
Note that you may get files changed reported like env_vars.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.dev/ocis/development/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/debugging/</guid>
      <description>Debugging Start ocis Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process Debugging the ocis in a docker container Gather error messages Managing dependencies and testing changes Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://owncloud.dev/ocis/development/build/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/build/</guid>
      <description>Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image Build requirements see Development - Getting Started
Get the sources git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary You only need to run following command if you have changed protobuf definitions or the frontend part in one of the extensions. Run the command in the root directory of the repository. Otherwise you can skip this step and proceed to build the oCIS binary.</description>
    </item>
    
    <item>
      <title>Acceptance Testing</title>
      <link>https://owncloud.dev/ocis/development/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/testing/</guid>
      <description>Testing With Test Suite in Docker Run Full Test Suite Local oCIS Tests (prefix api) Tests Transferred From ownCloud Core (prefix coreApi) Run Single Feature Test oCIS Image to Be Tested (Skip Local Image Build) Test Log Output Cleanup Testing With Test Suite Natively Installed Run oCIS Run Local oCIS Tests (prefix api) and Tests Transferred From ownCloud Core (prefix coreApi) Use Existing Tests for BDD Running ENV Config Tests (@env-Config) Run oCIS With ociswrapper Run the Tests Writing New ENV Config Tests Running Test Suite With Email Service (@email) Setup Inbucket Run oCIS Run the Acceptance Test Running Test Suite With Tika Service (@tikaServiceNeeded) Setup Tika Service Run oCIS Run the Acceptance Test Running Test Suite With Antivirus Service (@antivirus) Setup clamAV 1.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://owncloud.dev/ocis/development/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/extensions/</guid>
      <description>oCIS is all about files, sync and share - but most of the time there is more you want to do with your files, e.g. having a different view on your photo collection or editing your offices files in an online file editor. ownCloud 10 faced the same problem and solved it with applications, which can extend the functionality of ownCloud 10 in a wide range. Since oCIS is different in its architecture compared to ownCloud 10, we had to come up with a similar (yet slightly different) solution.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.dev/ocis/development/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17 Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
  </channel>
</rss>
